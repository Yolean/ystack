apiVersion: apps/v1
kind: Deployment
metadata:
  name: monitoring-proxy
  labels:
    app: monitoring-proxy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: monitoring-proxy
  template:
    metadata:
      labels:
        app: monitoring-proxy
    spec:
      containers:
      - name: proxy
        image: envoyproxy/envoy:v1.14.1@sha256:ccaf9e0135bf498fb8396ad49defd7f8567bf706411d9a707efb3978fb842c89
        ports:
        - containerPort: 9090
        - containerPort: 9093
        command:
        - /usr/local/bin/envoy
        - -l
        -   info
        - --config-yaml
        - |
          admin:
            access_log_path: /dev/null
            address:
              socket_address:
                protocol: TCP
                address: 0.0.0.0
                port_value: 9901
          static_resources:
            listeners:
            - name: prometheus
              address:
                socket_address:
                  protocol: TCP
                  address: 0.0.0.0
                  port_value: 9090
              filter_chains:
              - filters:
                - name: envoy.http_connection_manager
                  typed_config:
                    "@type": type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager
                    stat_prefix: prometheus
                    access_log:
                    - name: envoy.file_access_log
                      filter:
                        not_health_check_filter:  {}
                      typed_config:
                        "@type": type.googleapis.com/envoy.config.accesslog.v2.FileAccessLog
                        path: /dev/stdout
                        typed_json_format:
                          start_time: "%START_TIME%"
                          req_method: "%REQ(:METHOD)%"
                          req_path: "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%"
                          resp_code: "%RESPONSE_CODE%"
                          resp_flags: "%RESPONSE_FLAGS%"
                          bytes_recv: "%BYTES_RECEIVED%"
                          bytes_sent: "%BYTES_SENT%"
                          duration: "%DURATION%"
                          agent: "%REQ(USER-AGENT)%"
                          req_id: "%REQ(X-REQUEST-ID)%"
                          upstream_host: "%UPSTREAM_HOST%"
                          resp_upstream_service_time: "%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%"
                          resp_redirect: "%RESP(LOCATION)%"
                          req_content_type: "%REQ(CONTENT-TYPE)%"
                    route_config:
                      name: prometheus
                      virtual_hosts:
                      - name: prometheus
                        domains: ["*"]
                        routes:
                        - match:
                            prefix: "/"
                          route:
                            cluster: prometheus
                            timeout: 30s
                    http_filters:
                    - name: envoy.filters.http.router
            - name: alertmanager
              address:
                socket_address:
                  protocol: TCP
                  address: 0.0.0.0
                  port_value: 9093
              filter_chains:
              - filters:
                - name: envoy.http_connection_manager
                  typed_config:
                    "@type": type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager
                    stat_prefix: alertmanager
                    access_log:
                    - name: envoy.file_access_log
                      filter:
                        not_health_check_filter:  {}
                      typed_config:
                        "@type": type.googleapis.com/envoy.config.accesslog.v2.FileAccessLog
                        path: /dev/stdout
                        typed_json_format:
                          start_time: "%START_TIME%"
                          req_method: "%REQ(:METHOD)%"
                          req_path: "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%"
                          resp_code: "%RESPONSE_CODE%"
                          resp_flags: "%RESPONSE_FLAGS%"
                          bytes_recv: "%BYTES_RECEIVED%"
                          bytes_sent: "%BYTES_SENT%"
                          duration: "%DURATION%"
                          agent: "%REQ(USER-AGENT)%"
                          req_id: "%REQ(X-REQUEST-ID)%"
                          upstream_host: "%UPSTREAM_HOST%"
                          resp_upstream_service_time: "%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%"
                          resp_redirect: "%RESP(LOCATION)%"
                          req_content_type: "%REQ(CONTENT-TYPE)%"
                    route_config:
                      name: alertmanager
                      virtual_hosts:
                      - name: alertmanager
                        domains: ["*"]
                        routes:
                        - match:
                            prefix: "/"
                          route:
                            cluster: alertmanager
                            timeout: 30s
                    http_filters:
                    - name: envoy.filters.http.router
            - name: grafana
              address:
                socket_address:
                  protocol: TCP
                  address: 0.0.0.0
                  port_value: 3000
              filter_chains:
              - filters:
                - name: envoy.http_connection_manager
                  typed_config:
                    "@type": type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager
                    stat_prefix: grafana
                    access_log:
                    - name: envoy.file_access_log
                      filter:
                        not_health_check_filter:  {}
                      typed_config:
                        "@type": type.googleapis.com/envoy.config.accesslog.v2.FileAccessLog
                        path: /dev/stdout
                        typed_json_format:
                          start_time: "%START_TIME%"
                          req_method: "%REQ(:METHOD)%"
                          req_path: "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%"
                          resp_code: "%RESPONSE_CODE%"
                          resp_flags: "%RESPONSE_FLAGS%"
                          bytes_recv: "%BYTES_RECEIVED%"
                          bytes_sent: "%BYTES_SENT%"
                          duration: "%DURATION%"
                          agent: "%REQ(USER-AGENT)%"
                          req_id: "%REQ(X-REQUEST-ID)%"
                          upstream_host: "%UPSTREAM_HOST%"
                          resp_upstream_service_time: "%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%"
                          resp_redirect: "%RESP(LOCATION)%"
                          req_content_type: "%REQ(CONTENT-TYPE)%"
                    route_config:
                      name: grafana
                      virtual_hosts:
                      - name: grafana
                        domains: ["*"]
                        routes:
                        - match:
                            prefix: "/"
                          route:
                            cluster: grafana
                            timeout: 30s
                    http_filters:
                    - name: envoy.filters.http.router
            clusters:
            - name: prometheus
              type: STRICT_DNS
              connect_timeout: 0.25s
              lb_policy: ROUND_ROBIN
              load_assignment:
                cluster_name: prometheus
                endpoints:
                - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          protocol: TCP
                          port_value: 9090
                          address: prometheus-now.monitoring.svc.cluster.local
            - name: alertmanager
              type: STRICT_DNS
              connect_timeout: 0.25s
              lb_policy: ROUND_ROBIN
              load_assignment:
                cluster_name: alertmanager
                endpoints:
                - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          protocol: TCP
                          port_value: 9093
                          address: alertmanager-main.monitoring.svc.cluster.local
            - name: grafana
              type: STRICT_DNS
              connect_timeout: 0.25s
              lb_policy: ROUND_ROBIN
              load_assignment:
                cluster_name: grafana
                endpoints:
                - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          protocol: TCP
                          port_value: 3000
                          address: grafana.monitoring.svc.cluster.local
